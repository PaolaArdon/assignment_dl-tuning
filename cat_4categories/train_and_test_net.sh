#!/bin/bash

# Copyright: (C) 2018 iCub Facility - Istituto Italiano di Tecnologia
# Authors: Giulia Pasquale <giulia.pasquale@iit.it>
# CopyPolicy: Released under the terms of the GNU GPL v3.0.

################################################################################
## Paths to Caffe scripts
################################################################################

# path to caffe executable
# this will be called for fine-tuning the CNN
# (you should have the Caffe_ROOT env variable in your ~/.bashrc-dev)
CAFFE_BIN=${Caffe_ROOT}/build/install/bin/caffe
echo ${CAFFE_BIN}

# path to executable computing mean image of a set of images
# this will be called to compute the mean image of the training set
# to be subtracted from each image input to the CNN
COMPUTE_MEAN_BIN=${Caffe_ROOT}/build/install/bin/compute_image_mean
echo ${COMPUTE_MEAN_BIN}

# path to executable creating an LMDB database out of a list of images
# this will be called to encode all train and validation images
# in an efficient database format to be called by caffe during training
CREATE_LMDB_BIN=${Caffe_ROOT}/build/install/bin/convert_imageset
echo ${CREATE_LMDB_BIN}

################################################################################
## Paths to the scripts provided in this repository
################################################################################

# directory where you should have all deep learning tutorials/assignments
LAB_DIR=/home/icub/robot-code/dl-lab
echo ${LAB_DIR}

# directory of this repository
TUTORIAL_DIR=${LAB_DIR}/assignment_dl-tuning
echo ${TUTORIAL_DIR}

# directory name of this exercise
# in this case we perform an object IDentification task
# between two objects
EX=cat_4categories
echo ${EX}

# scripts that parse the log file output of caffe during training
# these will be called to plot train/validation curves
PARSE_LOG_SH=${TUTORIAL_DIR}/scripts/parse_caffe_log.sh
echo ${PARSE_LOG_SH}
PLOT_LOG_SH=${TUTORIAL_DIR}/scripts/plot_log.gnuplot
echo ${PLOT_LOG_SH}

# script that takes as input a caffe model and test it on a list of images
# displaying the predictions and the final accuracy
# this will be called to test the trained model
CLASSIFY_IMAGE_LIST_BIN=${TUTORIAL_DIR}/scripts/src/build/classify_image_list_vvv
echo ${CLASSIFY_IMAGE_LIST_BIN}

################################################################################
## Paths to the train, validation and test image sets
################################################################################

# iCW dataset directory
# pay attention to put a '/' at the end
IMAGES_DIR=/home/icub/robot-code/datasets/iCW/
echo ${IMAGES_DIR}

# list of images, specified as relative paths wrt the dataset folder
# these lists are generated by the provided script create_imagesets.py
FILELIST_TRAIN=${TUTORIAL_DIR}/${EX}/images_lists/train.txt
echo ${FILELIST_TRAIN}
FILELIST_VAL=${TUTORIAL_DIR}/${EX}/images_lists/val.txt
echo ${FILELIST_VAL}
FILELIST_TEST=${TUTORIAL_DIR}/${EX}/images_lists/test.txt
echo ${FILELIST_TEST}
LABELS_FILE=${TUTORIAL_DIR}/${EX}/images_lists/labels.txt
echo ${LABELS_FILE}

# train (plus mean image) and validation databases
# these will be generated by calling caffe's executables
# that we specified at lines 26 (and 20)
LMDB_TRAIN=${TUTORIAL_DIR}/${EX}/lmdb_train/
echo ${LMDB_TRAIN}
BINARYPROTO_MEAN=${TUTORIAL_DIR}/${EX}/mean.binaryproto
echo ${BINARYPROTO_MEAN}
LMDB_VAL=${TUTORIAL_DIR}/${EX}/lmdb_val/
echo ${LMDB_VAL}

################################################################################
## Paths to the model definition files and initial weights
################################################################################

# name of the directory where we keep the
# train_val.prototxt, solver.prototxt and deploy.prototxt
PROTOCOL="all-3"

# path to the solver.prototxt (which points to the train_val.prototxt)
# the solver specifies all parameters of the training procedure
# and you have to ensure these are correct by looking into this file!
# look also into the train_val.prototxt and check it as explained therein
SOLVER_FILE=${TUTORIAL_DIR}/${EX}/${PROTOCOL}/solver.prototxt
echo ${SOLVER_FILE}

# path to the deploy.prototxt
# this is generally used to employ the trained model in deployment
# it differs from the train_val.prototxt in that no data layer is specified
# since the input is supposed to be already in memory (and preprocessed)
# you have to ensure that this file is correctly set up by looking into it
DEPLOY_FILE=${TUTORIAL_DIR}/${EX}/${PROTOCOL}/deploy.prototxt
echo ${DEPLOY_FILE}

# path to the pre-trained weights from which we start the fine-tuning
WEIGHTS_FILE=${Caffe_ROOT}/models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel
echo ${WEIGHTS_FILE}

################################################################################
## Execute train and test
################################################################################

## 1. create DATABASES

rm -rf ${LMDB_TRAIN}
${CREATE_LMDB_BIN} --resize_width=256 --resize_height=256 --shuffle ${IMAGES_DIR} ${FILELIST_TRAIN} ${LMDB_TRAIN}
${COMPUTE_MEAN_BIN} ${LMDB_TRAIN} ${BINARYPROTO_MEAN}
rm -rf ${LMDB_VAL}
${CREATE_LMDB_BIN} --resize_width=256 --resize_height=256 --shuffle ${IMAGES_DIR} ${FILELIST_VAL} ${LMDB_VAL}

## 2. train

# cd to the folder is needed since in solver.prototxt
# we defined the relative path to the train_val.prototxt
cd ${TUTORIAL_DIR}/${EX}/${PROTOCOL}

# call caffe executable for training
${CAFFE_BIN} train -solver ${SOLVER_FILE} -weights ${WEIGHTS_FILE} --log_dir=${TUTORIAL_DIR}/${EX}/${PROTOCOL}

## 3. parse caffe.INFO to obtain readable tables

# remove the files below if already existing
rm ${TUTORIAL_DIR}/${EX}/${PROTOCOL}/caffeINFOtrain.txt
rm ${TUTORIAL_DIR}/${EX}/${PROTOCOL}/caffeINFOval.txt
# create new caffeINFOtrain.txt and caffeINFOval.txt
${PARSE_LOG_SH} ${TUTORIAL_DIR}/${EX}/${PROTOCOL}/caffe.INFO

# plot caffeINFOtrain.txt and caffeINFOval.txt
gnuplot -e "iodir='${TUTORIAL_DIR}/${EX}/${PROTOCOL}'" ${PLOT_LOG_SH}

## 4. choose the best model (last epoch) 

# list all snapshots and take the last one
# (you should have only this one, if you left snapshot_iter=0 in solver.prototxt
snap_list=(`ls -t icw_iter*.caffemodel`)
FINAL_SNAP=${TUTORIAL_DIR}/${EX}/${PROTOCOL}/${snap_list[0]}
FINAL_MODEL=${TUTORIAL_DIR}/${EX}/${PROTOCOL}/final.caffemodel
mv ${FINAL_SNAP} ${FINAL_MODEL}
# remove other snapshots if present
rm ${TUTORIAL_DIR}/${EX}/${PROTOCOL}/icw_iter_*.solverstate
rm ${TUTORIAL_DIR}/${EX}/${PROTOCOL}/icw_iter_*.caffemodel

## 5. test

# set the path to the model to be used
FINAL_MODEL=${TUTORIAL_DIR}/${EX}/${PROTOCOL}/final.caffemodel

# choose whether you want to print and visualize the prediction for each image
# the string can be either "true" or "false"
PRINT_PREDICTIONS="true";
# if the above is true, choose the rate [ms] of visualization
IMG_DELAY="300"

# call the test script (classify_image_list_vvv.cpp)
${CLASSIFY_IMAGE_LIST_BIN} ${DEPLOY_FILE} ${FINAL_MODEL} ${BINARYPROTO_MEAN} \
                           ${LABELS_FILE} ${IMAGES_DIR} ${FILELIST_TEST} \
                           ${TUTORIAL_DIR}/${EX}/${PROTOCOL}/test_acc.txt ${PRINT_PREDICTIONS} ${IMG_DELAY}

## 6. finish!

echo "********* Done! *********"
